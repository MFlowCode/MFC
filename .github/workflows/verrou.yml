name: Floating-Point Compliance

on: [pull_request, push]

jobs:
  Floating-Point_Compliance:
    runs-on: ubuntu-latest
    steps:
      - name: Clone PR
        uses: actions/checkout@v4

      - name: Setup
        run: |
          # get recent release of valgrind from GitHub API
            VERROU_VERSION=$(curl -s https://api.github.com/repos/edf-hpc/verrou/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
            VERROU_NUMBER=${VERROU_VERSION#v}

            wget -P pr https://github.com/edf-hpc/verrou/releases/download/${VERROU_VERSION}/valgrind-3.23.0_verrou-${VERROU_NUMBER}.tar.gz
            cd pr
            tar -xzf valgrind-3.23.0_verrou-${VERROU_NUMBER}.tar.gz
            cd valgrind-3.23.0+verrou-${VERROU_NUMBER}
            ./autogen.sh
            ./configure --prefix=$HOME/.local
            make
            make install
            cd ../..
            rm -rf pr/valgrind-*

          sudo apt update -y
          sudo apt install -y cmake gcc g++ python3 python3-dev hdf5-tools \
                  libfftw3-dev libhdf5-dev openmpi-bin libopenmpi-dev

          ./mfc.sh build --no-mpi
          find examples/ -name case.py -exec sed -i 's/"parallel_io": *"T"/"parallel_io": "F"/g' {} +

          for case in examples/0D_*/case.py examples/1D_*/case.py; do
            ./mfc.sh run "$case" || true
          done

      - name: Run Verrou
        run: |                    
          mkdir -p verrou_reports
            for inp in examples/*/simulation.inp; do
              case_dir=$(dirname "$inp")
              case_name=$(basename "$case_dir")
              run_dir="run_$case_name"
              mkdir -p "$run_dir"
              cp "$case_dir"/* "$run_dir"/ 2>/dev/null || true
              cp -r "$case_dir"/restart_data "$run_dir"/ 2>/dev/null || true

              for flags in \
                "--tool=verrou -s --rounding-mode=average_comdet" \
                "--tool=verrou -s --rounding-mode=random" \
                "--tool=verrou -s --rounding-mode=nearest"
              do
              flag_name=$(echo $flags | tr ' ' '_' | tr -d '=*?:"<>|')
              out_file="verrou_reports/${case_name}_${flag_name}.log"
              (
                cd "$run_dir"
                output=$($HOME/.local/bin/valgrind $flags ../../build/staging/*/simulation 2>&1 || true)
                echo "$output"
                echo "$output" > "../$out_file"
              )
              done
            done

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verrou-reports
          path: verrou_reports/