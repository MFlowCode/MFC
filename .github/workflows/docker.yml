name: Containerization

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'tag to containerize'
        required: true

concurrency:
  group: Containerization
  cancel-in-progress: false

jobs:
  Container:
    strategy:
      matrix:
        config:
            - { name: 'cpu', runner: 'ubuntu-22.04',     base_image: 'ubuntu:22.04' }
            - { name: 'cpu', runner: 'ubuntu-22.04-arm', base_image: 'ubuntu:22.04' }
            - { name: 'gpu', runner: 'ubuntu-22.04',     base_image: 'nvcr.io/nvidia/nvhpc:23.11-devel-cuda12.3-ubuntu22.04' }
            - { name: 'gpu', runner: 'ubuntu-22.04-arm', base_image: 'nvcr.io/nvidia/nvhpc:23.11-devel-cuda12.3-ubuntu22.04' }
    runs-on: ${{ matrix.config.runner }}
    outputs:
      tag: ${{ steps.clone.outputs.tag }}
    steps:
      - name: Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Clone
        id: clone
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_ENV
          git clone --branch "$TAG" --depth 1 https://github.com/MFlowCode/MFC.git mfc

      - name: Stage
        run: |
          sudo mkdir -p /mnt/share
          sudo chmod 777 /mnt/share
          cp -r mfc/* /mnt/share/
          cp -r mfc/.git /mnt/share/.git
          cp mfc/.github/Dockerfile /mnt/share/
          cp mfc/.github/.dockerignore /mnt/share/

      - name: Build and Deploy
        uses: docker/build-push-action@v6
        with:
          builder: default
          context: /mnt/share
          file: /mnt/share/Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.config.base_image }}
            TARGET=${{ matrix.config.name }}
            CC_COMPILER=${{ contains(matrix.config.name, 'gpu') && 'nvc' || 'gcc' }}
            CXX_COMPILER=${{ contains(matrix.config.name, 'gpu') && 'nvc++' || 'g++' }}
            FC_COMPILER=${{ contains(matrix.config.name, 'gpu') && 'nvfortran' || 'gfortran' }}
            COMPILER_PATH=${{ contains(matrix.config.name, 'gpu') && '/opt/nvidia/hpc_sdk/Linux_x86_64/compilers/bin' || '/usr/bin' }}
            COMPILER_LD_LIBRARY_PATH=${{ contains(matrix.config.name, 'gpu') && '/opt/nvidia/hpc_sdk/Linux_x86_64/compilers/lib' || '/usr/lib' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mfc:${{ env.TAG }}-${{ matrix.config.name }}-${{ matrix.config.runner}}
          push: true

  manifests:
    runs-on: ubuntu-latest
    needs: Container
    steps:
      - name: Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Create and Push Manifest Lists
        env:
          TAG: ${{ needs.Container.outputs.tag }}
          REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}/mfc
        run: |
          docker manifest create $REGISTRY:$TAG-cpu $REGISTRY:$TAG-cpu-ubuntu-22.04 $REGISTRY:$TAG-cpu-ubuntu-22.04-arm
          docker manifest create $REGISTRY:$TAG-gpu $REGISTRY:$TAG-gpu-ubuntu-22.04 $REGISTRY:$TAG-gpu-ubuntu-22.04-arm
          docker manifest create $REGISTRY:latest-cpu $REGISTRY:$TAG-cpu-ubuntu-22.04 $REGISTRY:$TAG-cpu-ubuntu-22.04-arm
          docker manifest create $REGISTRY:latest-gpu $REGISTRY:$TAG-gpu-ubuntu-22.04 $REGISTRY:$TAG-gpu-ubuntu-22.04-arm
          
          docker manifest push $REGISTRY:$TAG-cpu
          docker manifest push $REGISTRY:$TAG-gpu
          docker manifest push $REGISTRY:latest-cpu
          docker manifest push $REGISTRY:latest-gpu